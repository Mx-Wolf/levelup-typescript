title: Классы и интерфейсы
type: test
description: |
  Проверьте ваши знания о базовых понятиях в контексте структурных типов, их объявления и эквивалентности
wizard: true
successMessage: Порядок, переходим к следующему разделу
failureMessage: Вам следует повторить при каких условиях typescript рассматривает типы значении переменных как эквивалентные
questions:
  - id: 10
    title: Какие ключевые слова позволяют моделировать сложные объекты в программах typescript
    type: multiple
    options:
      - id: 10
        value: type
        correct: true
        resultMessage: | 
          с помощью ключевого слова type разработчик 
          может определить синоним/псевдоним структуры 
      - id: 20
        value: interface
        correct: true
        resultMessage: |
          с помощью ключевого слова interface разработчик
          может задать имя в пространстве типов
          typescript и определить структуру этого типа.
      - id: 30
        value: class
        correct: true
        resultMessage: |
          с помощью ключевого слова class разработчик 
          может одновременно задать структуру и 
          поведение. typescript будет использовать 
          описание структуры для выяснения эквивалентности 
          типов значений переменных класса
  - id: 20
    title: | 
      Разрешается ли определять конкретные значения с аннотацией interface?
    description: |
      Используя определение типов, ответьте на вопрос
      ```typescript
      type Structure1 = {name: string};
      interface Structure2 {name: string};
      const a: Structure2 = {name: "псевдоним"};
      ```
    type: single
    options:
      - id: 10
        value: да
        correct: true
        resultMessage: |
          вы можете объявить и инициализировать переменную как с типом интерфейса, так и с типом псевдонима
      - id: 20
        value: нет
        correct: false      
        resultMessage: |
          вы можете объявить и инициализировать переменную как с типом интерфейса, так и с типом псевдонима
  - id: 30
    title: | 
      Разрешается ли присваивать значения одного типа переменным объявленным с другим именем типа?
    description: |
      Используя определение типов, ответьте на вопрос

      ```typescript
      type Structure1 = {name: string};
      interface Structure2 {name: string};
      const a: Structure1 = {name: "псевдоним"};
      const b: Structure2 = a;
      ```
    type: single
    options:
      - id: 10
        value: да
        correct: true
        resultMessage: |
          вы можете присваивать значения переменным, если тип значения и тип переменной эквивалентны. 
          В простейшем случае - если имена и типы полей совпадают.
      - id: 20
        value: нет
        correct: false      
        resultMessage: |
          вы можете присваивать значения переменным, если тип значения и тип переменной эквивалентны. 
          В простейшем случае - если имена и типы полей совпадают.
  - id: 40
    title: | 
      Разрешается ли изменять определение типа в разных частях программы
    description: |
      Используя определение типов, ответьте на вопрос
      
      ```typescript
      interface Structure1 { refId(): number }
      interface Structure1 { refId(): unknown }
      declare const a: Structure1;

      ```
    type: single
    options:
      - id: 10
        value: да
        correct: true
        resultMessage: |
          Вы можете произвести операцию объединения интерфейсов. Для объявлений методов, 
          каждое последующее объявление при совпадении имен рассматривается как перегрузка метода.
      - id: 20
        value: нет
        correct: false      
        resultMessage: |
          Вы можете произвести операцию объединения интерфейсов. Для объявлений методов, 
          каждое последующее объявление при совпадении имен рассматривается как перегрузка метода.
  - id: 50
    title: | 
      Разрешается ли изменять определение типа в разных частях программы
    description: |
      Используя определение типов, ответьте на вопрос
      
      ```typescript
      interface Structure1 { id: number }
      interface Structure1 { name: string }
      declare const a: Structure1;

      ```
    type: single
    options:
      - id: 10
        value: да
        correct: true
        resultMessage: |
          Вы можете произвести операцию объединения интерфейсов. новые члены структуры добавляются
          в определение интерфейса.
      - id: 20
        value: нет
        correct: false      
        resultMessage: |
          Вы можете произвести операцию объединения интерфейсов. новые члены структуры добавляются
          в определение интерфейса.