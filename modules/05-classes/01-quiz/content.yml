title: Простейшие классы в typescript
type: test
description: |
  Проверьте ваши знания о простейших применениях классов в typescript
wizard: true
successMessage: Порядок, переходим к следующему разделу
failureMessage: Вам следует повторить основные сведения о применении классов в typescript
questions:
  - id: 10
    title: Какой результат будет в консоли?
    description: |
      в контексте определения класса A какие элементы будет содержать массив, переданный на консоль
      ```typescript
      class A {
          private uniqueId = Math.random();
          public readonly name: string;
          constructor(name: string) { this.name = name; }
          get path() { return `${this.name}/${this.uniqueId}`; }
      }
      const a = new A("the a");

      console.log(Object.keys(a));
      ```
    type: single
    options:
      - id: 10
        value: |
          "["name"] - объект имеет только одно публичное поле для перечисления методом Object.keys. поле uniqueId приватное."
        correct: false
        resultMessage: |
          во время исполнения информация указанная в модификаторах public, protected, private теряется
      - id: 20
        value: |
          "["uniqueId", "name"] - объект имеет два поля оба они доступны для перечисления методом Object.keys"
        correct: true
        resultMessage: |
          во время исполнения информация указанная в модификаторах public, protected, private теряется
      - id: 30
        value: |
          "["uniqueId", "name", "path"] - объект имеет по мимо конструктора три ключа для перечисления методом Object.keys."
        correct: false
        resultMessage: |
          во время исполнения информация указанная в модификаторах public, protected, private теряется. методы класса являются ключами не значения а его прототипа.
  - id: 20
    title: Какие из следующих утверждений являются верными
    description: |
      в контексте определения типов, приведенных ниже отметьте верные утверждения.
      ```typescript
      interface Service {
          readonly name: string;
          readonly path: () => string;
      }
      declare function logger(value:Service):void;
      class ServiceImp implements Service {
          private readonly uniqueId = Math.random();
          constructor(public readonly name: string) { }
          public path() { return `${this.name}/${this.uniqueId}`; }
      }

      const a:Service = new ServiceImp("name");
      const b:Service = {name:"name",path:()=>""};
      ```
    type: multiple
    options:
      - id: 10
        value: Object.keys(a).length === 2
        correct: true
        resultMessage: |
          "ключами этого типа будут значения ["name", "uniqueId"]".
      - id: 20
        value: Object.keys(b).length === 2
        correct: true
        resultMessage: |
          "ключами значения b будут ["name", "path"]"
      - id: 30
        value: TypeScript допускает вызов logger(a);
        correct: true
        resultMessage: |
          Нет нарушения в утиной типизации - вызов допускается.
      - id: 40
        value: TypeScript допускает вызов logger(b)
        correct: true
        resultMessage: |
          Нет нарушения утиной типизации, вызов допускается.
      - id: 50
        value: Object.getOwnPropertyNames(Object.getPrototypeOf(a)).length === 2
        correct: true
        resultMessage: |
          "["constructor", "path"]"
      - id: 60
        value: Object.getOwnPropertyNames(Object.getPrototypeOf(b)).length === 2
        correct: false
        resultMessage: |
          "содержит все свойства прототипа object"


