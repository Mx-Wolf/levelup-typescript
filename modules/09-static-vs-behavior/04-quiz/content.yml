title: Вопросу о необходимости дополнительных инструментов при создании качественного ПО
type: test
description: |
  Проверьте ваши знания о современных возможностях на пути к качественному ПО
wizard: true
successMessage: Порядок, переходим к следующему разделу
failureMessage: Вам следует повторить возможности инструментов повышения качества ПО
questions:
  - id: 10
    title: Статический анализ typescript предоставляет вам полную уверенность в типе значения ?
    description: |
      Для примера кода, приведенного ниже, верно ли, что значение результата выполнения функции всегда будет иметь тип `number`

      ```typescirpt
      function peek(list:number[]):number{
        return list[0];
      }
      ```
    type: single
    options:
      - id: 10
        value: да
        correct: false
        resultMessage: |
          При получении пустого массива, во время выполнения программы значение результата функции будет `undefined`
      - id: 20
        value: нет
        correct: true
        resultMessage: |
          Возможности typescript ограничены только статическим анализом, выход за пределы
          массива, обращение к несуществующему ключу Record, и подобные действия выходят за рамки
          статического анализа.
  - id: 20
    title: Typescript требует организации файлов исходного кода специальным образом?
    type: single
    options:
      - id: 10
        value: От разработчика требуется группировать интерфейсы и типы отдельно от процедур и функций
        correct: false
        resultMessage: |
          typescript позволяет определять типы или интерфейсы непосредственно в местах их
          использования. При этом typescript поощряет внимательное отношение к архитектуре
          приложения.
      - id: 20
        value: |
          Разработчик обязан следовать выбранной для текущего проекта
          архитектуре и, следовательно, typescript жестко ограничивает разработчика
          в способах организации файлов и папок.
        correct: false
        resultMessage: |
          Требования к жесткой организации файлов в папке проекта диктует не typescript, а выбранный framework.
      - id: 30
        value: |
          typescript безразлично относится к местам расположения модулей, а значит разработчик
          может располагать файлы, где хочет.
        correct: true
        resultMessage: |
          typescript не поможет вам организовать ваши исходники. Если вы не будете самостоятельно
          уделять внимание организации кода, рано или поздно это скажется на
          стоимости сопровождения проекта и на качестве результата. Для лучшей организации исходников
          довольно полезно придерживаться единых для вашей команды архитектурных принципов.
  - id: 30
    title: |
      Typescript позволяет автоматически документировать принятые разработчиком
      решения в отношении реализации поведения алгоритмов в исключительных ситуациях
    description: |
      Очевидно, что указание типа аргументов и результата функции создает для typescript-а
      автоматически поддерживаемую документацию о структуре значений. Можно ли сказать что-то
      аналогичное в отношении поведения программы во время использования различных
      входящих значений.
    type: single
    options:
      - id: 10
        value: да
        correct: false
        resultMessage: |
          typescript достаточно интеллектуален во время статического анализа кода, но не в
          состоянии анализировать определенные краевые ситуации во время работы программы.
          Это относится к контролю выхода индекса за пределы массива, чтение значения несуществующего ключа и др.
      - id: 20
        value: нет
        correct: true
        resultMessage: |
          typescript достаточно интеллектуален во время статического анализа кода, но не в
          состоянии анализировать определенные краевые ситуации во время работы программы.
          Это относится к контролю выхода индекса за пределы массива, чтение значения несуществующего ключа и др.
          Для документирования поведения программы при получении пограничных значений следует
          обратить внимание на инструменты модульного тестирования



