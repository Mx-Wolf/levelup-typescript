description: "Примитивные, или встроенные, типы TypeScript унаследовала у JavaScript."
failureMessage: "Определение факта принадлежности значения одному из примитивных типов важный процесс и вам придется к нему прибегать регулярно"
questions:
  - title: "Значение какой переменной относится к примитивному типу"
    description: |
      ```ts
      const a = 42;
      const b = new Number(42);
      const c = Number(42);
      const d = Number('Life, the universe, everything');
      ```
    type: "multiple"
    options:
      - value: значение переменной `a` имеет встроенный примитивный тип `number`
        correct: true
        resultMessage: "числовой литерал создает значение примитивного типа"
        id: 1
      - value: значение переменной `b` имеет встроенный примитивный тип `Number`
        correct: false
        resultMessage: "оператор `new` создает экземпляр класса Number, который не является примитивным"
        id: 2
      - value: значение переменной `c` имеет встроенный примитивный тип `number`
        correct: true
        resultMessage: "функция `Number`, вызванная без оператора `new` возвращает числовое значение, являющееся примитивным"
        id: 3
      - value: значение переменной `d` имеет встроенный примитивный тип `string`
        correct: true
        resultMessage: "функция `Number`, вызванная без оператора `new` возвращает числовое значение, являющееся примитивным. NaN - это числовое значение"
        id: 4
  - title: "Изменится ли значение примитивного типа?"
    description: |
      ```ts
      let primitiveValue = 42;
      primitiveValue += 1;
      ```
    type: "single"
    options:
      - value: "Да, значение примитивного типа 42 станет равным 43"
        resultMessage: "Следует различать значение примитивного типа и значение переменной, которой оно присвоено. Значение переменной можно изменить, а значение примитивного типа изменить нельзя"
        correct: false
        id: 1
      - value: "Нет, значение примитивного типа 42 так и останется значением 42"
        resultMessage: "Примитивные значения в JavaScript и в TypeScript неизменяемы. Следует различать значение примитивного типа и значение переменной, которой оно присвоено."
        correct: true
        id: 2
    id: 1
  - title: "Сколько сравнений необходимо выполнить, для того, чтобы уверенно выяснить, что значение является структурой"
    description: |
      TypeScript предоставляет оператор typeof. Этот оператор, при применении к значению, возвращает стоку с названием типа значения, содержащегося в переменной. Этот оператор можно использовать чтобы выяснить тип полученного параметра. Для иллюстрации, в API браузера метод `addEventListener(type, listener, useCapture);` может принимать три параметра. третий параметр, если присутствует, может быть примитивным значением или структурой. Сколько сравнений потребуется чтобы в общем случае определить значение такого параметра не строка, не число, или, скажем, не флаг, а именно структура с полями (свойствами)?
    options:
      - value: "Это должен выяснить компилятор и сервисы TypeScript. никаких дополнительных действий от разработчика не требуется"
        resultMessage: "По-видимому без сравнений не обойдешься!"
        correct: false
        id: 1
      - value: "Достаточно выяснить значение оператора typeof"
        resultMessage: "Если вы решили обойтись одним сравнением, то вероятно это `typeof useCapture === 'object'`, однако этого недостаточно. Дело в том, что выражение `typeof null` тоже возвращает значение `'object'`"
        correct: false
        id: 2
      - value: "Следует проверить значение оператора `typeof` и сравнить значение с `null`"
        resultMessage: "Структурное значение переменной `value` будет иметь typeof value ===\"object\" но не должно быть value === null, поэтому необходимо и достаточно выяснить, что выражение `typeof value ===\"object\" && value !== null` вычисляется в `true`"
        correct: true
        id: 3
      - value: "Необходимо проверить что значение задано, сравнить результат оператора typeof с 'object', и проверить значение на равенство 'null'"
        resultMessage: "Если вы решили произвести больше двух сравнений обратите внимание, что значение переменной `value` будет иметь typeof value ===\"object\" но не должно быть value === null, поэтому необходимо и достаточно выяснить, что выражение `typeof value ===\"object\" && value !== null` вычисляется в `true`"
        correct: false
        id: 4
    type: "multiple"
    id: 2
successMessage: "Определение факта принадлежности значения одному из примитивных типов важный процесс и вам придется к нему прибегать довольно регулярно"
title: "Вопросы обнаружения примитивных типов"
type: "test"
wizard: true
