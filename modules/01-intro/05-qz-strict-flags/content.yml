title: Тест по примитивным типам
type: test
description: Повторим основные моменты по теме примитивных типов.
wizard: true
questions:
  - id: 1
    title: "Значение какой переменной относится к примитивному типу?"
    description: |
    "```ts
    const a = 42;
    const b = new Number(42);
    const c = Number(42);
    const d = Number('Life, the universe, everything');
    ```"
    type: multiple
    options:
      - id: 1
        value: Значение переменной `a` имеет встроенный примитивный тип `number`
        correct: true
        resultMessage: |
          Числовой литерал создает значение примитивного типа
      - id: 2
        value: Значение переменной `b` имеет встроенный примитивный тип `Number`
        correct: false
        resultMessage: |
          Оператор `new` создает экземпляр класса Number, который не является примитивным
      - id: 3
        value: Значение переменной `c` имеет встроенный примитивный тип `number`
        correct: true
        resultMessage: |
          Функция `Number`, вызванная без оператора `new` возвращает числовое значение, являющееся примитивным
      - id: 4
        value: Значение переменной `d` имеет встроенный примитивный тип `string``
        correct: true
        resultMessage: |
          Функция `Number`, вызванная без оператора `new` возвращает числовое значение, являющееся примитивным. NaN - это числовое значение

  - id: 2
    title: "Изменится ли значение примитивного типа?"
    description: |
    "```ts
    let primitiveValue = 42;
    primitiveValue += 1;
    ```"
    type: single
    options:
      - id: 1
        value: Да, значение примитивного типа 42 станет равным 43
        correct: false
        resultMessage: |
          Следует различать значение примитивного типа и значение переменной, которой оно присвоено. Значение переменной можно изменить, а значение примитивного типа изменить нельзя
      - id: 2
        value: Нет, значение примитивного типа 42 так и останется значением 42
        correct: true
        resultMessage: |
          Примитивные значения в JavaScript и в TypeScript неизменяемы. Следует различать значение примитивного типа и значение переменной, которой оно присвоено

  - id: 3
    title: "Сколько сравнений необходимо выполнить, чтобы уверенно выяснить, что значение является структурой?"
    description: |
    TypeScript предоставляет оператор typeof. Этот оператор, при применении к значению, возвращает стоку с названием типа значения, содержащегося в переменной. Этот оператор можно использовать, чтобы выяснить тип полученного параметра. Для иллюстрации, в API браузера метод `addEventListener(type, listener, useCapture);` может принимать три параметра. Третий параметр, если присутствует, может быть примитивным значением или структурой. Сколько сравнений потребуется чтобы в общем случае определить значение такого параметра не строка, не число, или, скажем, не флаг, а именно структура с полями (свойствами)?
    type: multiple
    options:
      - id: 1
        value: |
          Это должен выяснить компилятор и сервисы TypeScript. Никаких дополнительных действий от разработчика не требуется
        correct: false
        resultMessage: |
          По-видимому без сравнений не обойдешься!
      - id: 2
        value: |
          Достаточно выяснить значение оператора typeof
        correct: false
        resultMessage: |
          Если вы решили обойтись одним сравнением, то вероятно это `typeof useCapture === 'object'`, однако этого недостаточно. Дело в том, что выражение `typeof null` тоже возвращает значение `'object'`
      - id: 3
        value: |
          Следует проверить значение оператора `typeof` и сравнить значение с `null`
        correct: true
        resultMessage: |
          Структурное значение переменной `value` будет иметь typeof value ===\"object\" но не должно быть value === null, поэтому необходимо и достаточно выяснить, что выражение `typeof value ===\"object\" && value !== null` вычисляется в `true`
      - id: 4
        value: Необходимо проверить что значение задано, сравнить результат оператора typeof с 'object' и проверить значение на равенство 'null'
        correct: false
        resultMessage: |
          Если вы решили произвести больше двух сравнений, обратите внимание, что значение переменной `value` будет иметь typeof value ===\"object\", но не должно быть value === null, поэтому необходимо и достаточно выяснить, что выражение `typeof value ===\"object\" && value !== null` вычисляется в `true`
