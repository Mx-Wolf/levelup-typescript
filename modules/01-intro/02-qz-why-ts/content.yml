title: Возможности TypeScript
type: test
wizard: true
questions:
  - title: "Правда ли, что JavaScript был создан для разработки сложных распределённых многопользовательских систем?"
    description: В 1994 году JavaScript был создан Бренданом Айком (Brendan Eich) за 10 дней.
    id: 1
    type: single
    options:
      - value: Да, JavaScript был языком программирования сложных распределённых систем с момента создания.
        correct: false
        id: 1
        resultMessage:  |
          JavaScript был создан для оживления статичных HTML-страниц. Изначально этот проект не преследовал цели создания больших, распределённых и критических для бизнеса систем. JavaScript позволил добавить динамику к статичным страницам без необходимости получения от сервера версии страницы, содержащей лишь несколько художественных отличий.
      - value: Нет, JavaScript разрабатывался как язык создания сценариев для оживления пользовательского интерфейса.
        correct: true
        id: 2
        resultMessage: |
          JavaScript был создан во времена, когда стоимость доставки HTML-файла с сервера на браузер была высока, но уже возникала потребность создания динамического контента. JavaScript позволил добавить динамику к статичным страницам без необходимости получения от сервера версии страницы, содержащей лишь несколько художественных отличий.
  - title: "Процесс создания каких приложений не выигрывает от использования TypeScript вместо JavaScript?"
    description: Проекты могут различаться своей критичностью для бизнеса, количеством заинтересованных участников, скоростью реализации, сроками жизни продукта и многими другими параметрами.
    id: 2
    type: single
    options:
      - correct: false
        value: "SPA — одностраничные приложения"
        id: 1
        resultMessage: "Поскольку все существующие SPA-фреймворки и библиотеки предоставляют разработчику возможность создавать исходный код на TypeScript, вы получите множество подсказок во время работы и повысите свою производительность."
      - correct: false
        value: "Написание JavaScript-библиотеки функций и компонентов для коллег и сообщества в целом."
        id: 2
        resultMessage: "TypeScript позволяет создавать надёжные, устойчивые и легко поддерживаемые библиотеки. Дополнительно TypeScript создаёт машиночитаемую документацию об API библиотеки. Поэтому и вы, и ваши пользователи получат дополнительные удобства от использования TypeScript."
      - correct: false
        value: "Оформление JavaScript-пакета для Node.js."
        id: 3
        resultMessage: "С одной стороны, Node.js запускает JavaScript-код в модулях формата CommonJS и ESM. С другой, TypeScript позволяет написать код один раз и создать результат — JavaScript в модулях любого формата — всего лишь изменением одной строки в файле tsconfig.json."
      - correct: false
        value: "Сопровождение существующего приложения."
        id: 4
        resultMessage: "в TypeScript допускается любая конструкция, которая допустима в JavaScript, поэтому прямое «переименование» файла .js в .ts и последующая перекомпиляция проекта вернёт вам ваш же код. TypeScript, возможно, будет «жаловаться» на рискованные места, но тем самым облегчит поиск ошибок."
      - correct: true
        value: "Правильного ответа среди перечисленных нет."
        id: 5
        resultMessage: "При использовании TypeScript вы получаете серьёзные преимущества в борьбе за качество кода независимо от размеров проекта или рисков, связанных с ним."
  - title: "Чем привлекателен TypeScript во время редактирования исходного кода в совместимых редакторах?"
    description: TypeScript — это не только компилятор, но и дополнительные услуги IDE.
    id: 3
    type: multiple
    options:
      - correct: true
        value: "Сокращает потери времени на поиск дефектов."
        id: 1
        resultMessage: "TypeScript анализирует код и обозначает предупреждениями и ошибками те места, которые легко пропустить разработчику. Он позволяет предусмотреть необходимые проверки ещё до падения программы во время работы."
      - correct: true
        value: "Мотивирует на улучшение существующего кода."
        id: 2
        resultMessage: "TypeScript существенно снижает риск неверного рефакторинга, что позволяет делать его чаще и эффективнее."
      - correct: true
        value: "Снижает стресс во время поиска нужных мест в программе для срочных действий."
        id: 3
        resultMessage: "TypeScript читает исходный код и позволяет редакторам настроить улучшенную навигацию по модулям проекта."
  - title: "Какие специфические знания и умения потребуются для эффективной работы на TypeScript?"
    description: TypeScript предъявляет требования к уровню знаний разработчика. Подумайте, насколько эти требования специфичны только для TypeScript.
    id: 4
    type: single
    options:
      - correct: false
        value: "Знание свойств, методов, событий компонентов DOM."
        id: 1
        resultMessage: "Сведения об API браузера не являются специфическими при использовании TypeScript. Ваши знания и опыт работы с ними на JavaScript будут надёжной поддержкой и в TypeScript."
      - correct: false
        value: "Понимание свойств фундаментальных структур данных, таких как очередь, список, дерево."
        id: 2
        resultMessage: "Умение правильно применять структуры данных — важный навык программистов, но это не специфика TypeScript."
      - correct: false
        value: "Понимание отношений между типами значений."
        id: 3
        resultMessage: "TypeScript строго смотрит на то, со значениями каких типов вы можете программировать. Однако любой другой язык программирования не сможет сделать программу рабочей, если вы будете нарушать «правила игры» и, например, извлекать из числа 42 значение по индексу 7. Таким образом, этот навык не является специфичным для TypeScript."
      - correct: true
        value: "Знание синтаксиса аннотации типов."
        id: 4
        resultMessage: "TypeScript вводит правила указания типов значений, допустимых для ваших переменных. Эти правила следует знать и уметь применять."
