title: "Typescript. Теория типов"
type: test
wizard: true
description: "Мы собрали для вас вопросы, которые часто попадаются на собеседованиях в различных компаниях."
questions:
  - title: "Какие из перечисленных типов являются примитивными в TypeScript?"
    description: "bigint\n      boolean\n      Date\n      Map\n      never\n      null\n      number\n      Set\n      string\n      symbol\n      undefined\n      unknown"
    type: multiple
    id: 1
    options:
      - correct: true
        value: "bigint."
        resultMessage: "bigint является примитивным типом JavaScript. Значения этого типа напрямую не совместимы с number, но могут быть преобразованы друг в друга. Осторожно. При преобразовании возможно потеря точности. Используйте этот тип тогда, когда ожидаете, что значения будут больше 52 бит."
        id: 1
      - correct: true
        value: "boolean."
        resultMessage: "Примитивный тип JavaScript. Для преобразования значений любого типа в boolean используйте варианты Boolean(value), !!value. Но не используйте new Boolean(value)."
        id: 2
      - correct: true
        value: "null."
        resultMessage: "Примитивный тип JavaScript. Специальное значение null имеет особенность выполнения оператора typeof. Обратите внимание, что typeof null === 'object'."
        id: 3
      - correct: true
        value: "number."
        resultMessage: "Примитивный тип JavaScript. Формат хранения значений IEEE 754. Значения типа number имеют все особенности чисел с плавающей точкой, в частности 0.1+0.2 !== 0.3."
        id: 4
      - correct: true
        value: "string."
        resultMessage: "Примитивный тип JavaScript. Неизменяемая цепочка символов в двухбайтной кодировке UTF-16."
        id: 5
      - correct: true
        value: "symbol."
        resultMessage: "Примитивный тип JavaScript. Тип для обозначения уникальных значений с особым смыслом. Одна из особенностей значений этого типа в том, что для преобразования в строку необходимо предпринять явное действие."
        id: 6
      - correct: true
        value: "undefined."
        resultMessage: "Примитивный тип JavaScript. Этот примитивный тип, например, обозначает значение объявленной, но не инициализированной переменной. Этот же тип имеют отсутствующие свойства объекта."
        id: 7
      - correct: false
        value: "Date."
        resultMessage: "Встроенный тип JavaScript, является объектом."
        id: 8
      - correct: false
        value: "Map."
        resultMessage: "Встроенный тип JavaScript, является объектом."
        id: 9
      - correct: false
        value: "Set."
        resultMessage: "Встроенный тип JavaScript, является объектом."
        id: 10
      - correct: true
        value: "never."
        resultMessage: "TypeScript дополняет набор примитивных типов в целях анализа. Обозначает тип переменной, которой никогда не будет присвоено значение. Один из примеров значений этого типа — значение результата работы функции, которая работает в бесконечном цикле и никогда не возвращается."
        id: 11
      - correct: true
        value: "unknown."
        resultMessage: "TypeScript дополняет набор примитивных типов в целях анализа. Используйте тип unknown для значения переменной, полученной извне."
        id: 12
  - title: "Как объявить переменную, значением которой может быть массив, содержащий элементы строковых или числовых значений?"
    type: single
    id: 2
    options:
      - value: "Добавить аннотацию типа let fruits: string[]."
        correct: false
        resultMessage: "Массив с аннотацией string[] может содержать только строки в качестве значений элементов."
        id: 1
      - value: "Использовать обобщённый тип. let fruits: Array<string>."
        correct: false
        resultMessage: "Переменная с типом Array<string> может содержать значение — массив, элементами которого могут быть только строки."
        id: 2
      - correct: false
        value: "Использовать способность компилятора догадываться о разрешённых типах по контексту: let arr = [1, 3, 'Apple', 'Orange', 'Banana', true, false]."
        resultMessage: "TypeScript способен выяснить тип переменной по контексту использования. Поскольку в массиве представлены и числа, и строки, и флаги, TypeScript обозначит переменную arr типом (string | number | boolean)[]."
        id: 3
      - correct: true
        value: "Добавить переменной аннотацию — массив объединения типа: let values: (string | number)[]."
        resultMessage: "Можно объявить переменную массива и сообщить о возможности сохранения в качестве элементов значения различных типов."
        id: 4
  - title: "В каких случаях не требуется аннотация типа при объявлении переменной 'buffer' ?"
    type: multiple
    id: 3
    options:
      - correct: true
        value: "let buffer = 3."
        resultMessage: "Тип переменной — number. TypeScript доопределяет тип переменной x по контексту. Например, если требуется специализированный литеральный тип 3, его можно указать вручную."
        id: 1
      - correct: true
        value: "let buffer = [0, 1, null]."
        resultMessage: "Тип переменной — (number|null)[] — выбирается наилучший общий тип. Когда в программе создаются литеральные массивы, вполне может оказаться, что требуется ручная настройка, и лучшим вариантом может быть ручная аннотация (0|1|null)[]."
        id: 2
      - correct: true
        value: "window.onmousedown = function (buffer) {} /*в отношении аргумента mouseEvent*/."
        resultMessage: "Тип аргумента buffer определяется по контексту из известного типа обработчика."
        id: 3
      - correct: true
        value: "const buffer = ():Item[] =>[new Home(),new About(), new Profile()] /*Home, About, Profile все они наследуют от Item*/."
        resultMessage: "Тип элементов массива Item — при условии, что все классы являются наследниками Item. Если же разработчику требуется кортеж, то можно дополнить аннотацию типа вручную."
        id: 4
      - correct: true
        value: "Для каждой из приведённых деклараций TypeScript в состоянии вывести тип переменной 'buffer'."
        resultMessage: "Хотя для TypeScript выведет нужные типы из значений, разработчик может вручную уточнить нужный тип."
        id: 5
  - title: "Какие ошибки обнаружит компилятор при сборке приведённой программы при компиляции с флагом strict?"
    description:  |
      ```ts
      // компилировать tsc --strict
      type Action = ()=>void;
      const getItem:Action = () =>{
      return 42;
      }
      const item = getItem();
      console.log(item);
      ```
    type: single
    id: 4
    options:
      - correct: true
        value: "Не обнаружит никаких ошибок."
        resultMessage: "Функцию, возвращающую результат, можно использовать на месте, где ожидается функция, возвращающая void. В данном случае переменной присваивается результат функции. Переменная item получит значение типа void. Поскольку метод log объекта Console принимает параметры типа any, item действительно можно отправить на консоль."
        id: 1
      - correct: false
        value: "Type 'number' is not assignable to type 'void'."
        resultMessage: "TypeScript позволяет возвращать значение из функции, имеющей аннотацию результата void. При этом TypeScript обозначит значение переменной item типом void. В частности, если вы попытаетесь сравнить item и 42 (item === 42), то получите сообщение об ошибке. Однако в том виде, в котором приведён отрывок, сообщений об ошибках не будет из-за типизации Console.log."
        id: 2
  - title: "Какие значения программа отобразит в консоли?"
    type: single
    id: 5
    description: |
      ```ts
      type Action = ()=>void;
      const getItem:Action = () =>{
        return 42;
      }
      const item = getItem();
      console.log(item);
      ```
    options:
      - correct: false
        value: "Не отобразит никаких символов."
        resultMessage: "в JavaScript все функции возвращают значения, даже если это undefined. Поскольку мы проинициализировали переменную при объявлении результатом работы функции, этот результат и будет выведен на консоль."
        id: 1
      - correct: true
        value: "42."
        resultMessage: "в JavaScript все функции возвращают значения, даже если это undefined. Несмотря на то, что тип переменной item для TypeScript будет void, для JavaScript значение будет совпадать с результатом работы функции. Этот пример ещё раз обращает внимание на трудности, которые могут возникнуть при использовании типа any (смотрим Console.log)."
        id: 2
  - title: "Допускает ли TypeScript следующую программу?"
    description: |
      ```ts
      type TextProvider = ()=>string;
      const THRESHOLD = 0.5;
      const getText:TextProvider =()=>{
        try{
          if(Math.random()<THRESHOLD){
            return 'success';
          }
          throw new Error('failure');
        }
        catch(err){
          return err.message;
        }
      }
      ```
    type: single
    id: 6
    options:
      - correct: false
        value: "Компилятор соберёт программу и создаст JS-файл без каких-либо предупреждений."
        resultMessage: "Компилятор, в зависимости от настроек флагов, может выдать предупреждение о возможном отсутствии свойства message. TypeScript не предусматривает аннотацию значения переменной в выражении catch."
        id: 1
      - correct: false
        value: "Компилятор выдаст предупреждение об отсутствии аннотации типа переменной err."
        resultMessage: "Компилятор, в зависимости от настроек флагов, может выдать предупреждение о возможном отсутствии свойства message. TypeScript не предусматривает аннотацию значения переменной в выражении catch."
        id: 2
      - correct: true
        value: "В присутствии флага useUnknownInCatchVariables компилятор выдаст предупреждение."
        resultMessage: "Компилятор, в зависимости от настроек флагов, может выдать предупреждение об отсутствии свойства message. TypeScript не предусматривает аннотацию значения переменной в выражении catch. При этом флаг переключает предполагаемое значение аннотации типа из any в unknown. Мы рекомендуем всегда использовать наиболее строгий режим компиляции."
        id: 3
  - title: "Какие флаги компилятора создадут условия для безошибочной компиляции программы?"
    description: |
      ```ts
      const THRESHOLD = 0.5;
      type TextProvider = ()=>string;
      const getText:TextProvider =()=>{
        try{
          if(Math.random()<THRESHOLD){
            return 'success';
          }
          throw 'failure';
        }
        catch(err){
          return err.message;
        }
      }
      ```
    type: single
    id: 7
    options:
      - correct: false
        value: "Программа синтаксически неверна, она не будет компилироваться без ошибок."
        resultMessage: "JavaScript позволяет использовать в выражении throw значение любого типа."
        id: 1
      - correct: true
        value: "useUnknownInCatchVariables=false."
        resultMessage: "Этот флаг заставляет компилятор считать все значения переменных в выражениях catch имеющими тип any."
        id: 2
  - title: "Сколько ошибок обнаружит компилятор?"
    description: |
      ```ts
      const optimist = ()=>true;
      let typeofValue: string;

      typeofValue = typeof true;
      typeofValue = typeof ()=>true;
      typeofValue = typeof (()=>true);
      typeofValue = typeof optimist;
      ```
    type: single
    id: 8
    options:
      - correct: false
        value: "0."
        resultMessage: "TypeScript специально ограничивает возможность использования оператора typeof в отношении выражения, которое можно спутать с вызовом функции. За исключением выражения typeof ()=>true, все строки допустимы в TypeScript."
        id: 1
      - correct: false
        value: "1."
        resultMessage: "TypeScript специально ограничивает возможность использования оператора typeof в отношении выражения, которое можно спутать с вызовом функции. За исключением выражения typeof ()=>true, все строки допустимы в TypeScript. Однако компилятор обнаружит больше одной ошибки: в строке typeof ()=>true он пожалуется на неверный синтаксис."
        id: 2
      - correct: true
        value: "2."
        resultMessage: "TypeScript специально ограничивает возможность использования оператора typeof в отношении выражения, которое можно спутать с вызовом функции. За исключением выражения typeof ()=>true, все строки допустимы в TypeScript. Однако компилятор обнаружит больше одной ошибки: в строке typeof ()=>true он пожалуется на неверный синтаксис два раза."
        id: 3
  - title: "Какие варианты для настройки компилятора возможны при работе c TypeScript?"
    type: multiple
    id: 9
    options:
      - correct: true
        value: "Создание tsconfig.json в корневой директории проекта."
        resultMessage: "Наличие tsconfig.json обозначает директорию как проект TypeScript. Этот файл содержит указания компилятору, какие файлы нужно компилировать, и настройки компиляции."
        id: 1
      - correct: true
        value: "Запуск tsc с набором параметров в командной строке."
        resultMessage: "Вы можете указать один или несколько (через глоб) .ts-файлов в командной строке и тут же добавить необходимые параметры и флаги."
        id: 2
      - correct: true
        value: "Настройки в проекте msbuild, например, .csproj."
        resultMessage: "При работе в рамках .net-проектов настройки tsconfig.json можно записать в файл проекта .csproj."
        id: 3
  - title: "Сколько реализаций придётся создать для трёх вариантов перегруженных функций?"
    description:  |
     ```ts
     declare function date(ticks:number):Date;
     declare function date(year:number, month: number, day:number):Date;
     declare function date(isoString:string):Date;
     ```
    type: single
    id: 10
    options:
      - correct: false
        value: "Три различные реализации."
        resultMessage: "TypeScript выбирает вариант объявления функции в порядке объявления и требует только одной реализации. Объявление самой реализации недоступно во время анализа."
        id: 1
      - correct: false
        value: "Реализация набора таких функций невозможна."
        resultMessage: "TypeScript выбирает вариант объявления функции в порядке объявления и требует только одной реализации. Объявление самой реализации недоступно во время анализа."
        id: 2
      - correct: true
        value: "Требуется одна реализация."
        resultMessage: "TypeScript выбирает вариант объявления функции в порядке объявления и требует только одной реализации. Объявление самой реализации недоступно во время анализа."
        id: 3
  - title: "Какую нагрузку несут интерфейсы в TypeScript?"
    type: multiple
    id: 11
    options:
      - correct: true
        value: "Определяют контракт между компонентами программы."
        resultMessage: "Интерфейс в TypeScript может служить для описания договорённостей взаимодействия между компонентами программы и таким образом определять контракт."
        id: 1
      - correct: true
        value: "Предоставляют возможности для реализации полиморфизма."
        resultMessage: "Разные объекты и классы могут реализовывать интерфейсы в TypeScript. Классы могут при этом принадлежать несвязанным иерархиями. Таким образом, интерфейсы являются инструментом для обеспечения полиморфизма"
        id: 2
      - correct: false
        value: "Ограничивают возможности множественного наследования."
        resultMessage: "TypeScript позволяет при описании интерфейсов расширять один или несколько интерфейсов-родителей."
        id: 3
      - correct: true
        value: "Определяют имя для нового типа данных."
        resultMessage: "Декларация интерфейса обеспечивает дополнительный вклад в пространство имён типов, в отличие от ключевого слова type, которое предназначено для создания псевдонимов существующих типов."
        id: 4
      - correct: false
        value: "Добавляют свойство в объект import.meta."
        resultMessage: "Мета-данные модуля не имеют отношения к TypeScript, они предназначены для использования во время работы программы."
        id: 5
  - title: "Приведённая программа компилируется без ошибок. Будет ли компилятор считать программу ошибочной, если заменить Pick<ServiceBase,\"queryData\"> на ServiceBase?"
    description: |
      ```ts
      class ServiceBase{
        private endpoint:string = '';
        protected getQueryUrl(endpoint:string):string{return endpoint};
        public async queryData():Promise<unknown>{
          const response = await fetch(this.getQueryUrl(this.endpoint));
          if(response.ok){
            return await response.json();
          }
          throw new Error();
        }
      }

      const mockService:Pick<ServiceBase,"queryData"> = {
        queryData:()=>Promise.resolve({})
      }
      ```
    type: single
    id: 12
    options:
      - value: "Разработчик может использовать имя класса на месте, где ожидается имя типа, поэтому программа будет компилироваться без ошибок."
        correct: false
        resultMessage: "Компилятор попытается обеспечить наличие private и protected полей мокового значения и не сможет выполнить этого. Программа не будет компилироваться. Ошибка: 'Type '{ queryData: () => Promise<{}>; }' is missing the following properties from type 'ServiceBase': endpoint, getQueryUrl'."
        id: 1
      - value: "Разработчик не сможет использовать описание типа значений экземпляров класса ServiceBase для создания моковых значений."
        correct: true
        resultMessage: "Компилятор попытается обеспечить наличие private и protected полей мокового значения и не сможет выполнить этого. Программа не будет компилироваться. Ошибка: 'Type '{ queryData: () => Promise<{}>; }' is missing the following properties from type 'ServiceBase': endpoint, getQueryUrl'."
        id: 2
  - title: "На примере приведённой программы объясните, что означает объединение типов в TypeScript?"
    description: "```ts\ntype KeyFieldType = number |string;\n\n      const keyToFind:KeyFieldType = 42;\n      const findKey = (keyToFind:KeyFieldType):KeyFieldType => keyToFind;\n      const keyFound: number = findKey();\n```"
    type: single
    id: 13
    options:
      - correct: true
        value: "Переменной объединённого типа можно присвоить значение любого из объединяемых типов."
        resultMessage: "В результате объединения типов вы создаёте новый, возможно, более широкий тип. Типы-составные части полностью в него включаются. Таким образом, значение любого типа, включённого в объединение, может быть присвоено переменной с аннотацией этого объединения."
        id: 1
      - correct: false
        value: "Переменной любого из объединяемых типов можно присвоить значение объединённого типа."
        resultMessage: "Объединяемые типы могут иметь несовместимые свойства. В результате значение объединения, скорее всего, не может быть присвоено переменной с типом составной части. Однако, если один из участвующих типов включает все остальные, такое действие может оказаться возможным. Например, type ustring = string | \"special\" останется эквивалентным string."
        id: 2
  - title: "На примере приведённой программы объясните, что означает пересечение типов в TypeScript."
    description:  |
      ```ts\nconst example = <TLeft, TRight>(keyToFind: TLeft & TRight, prefix:TLeft) => {\n
      type KeyFieldType = TLeft&TRight;\n
      keyFound = prefix;\n
      const findKey = (keyToFind: KeyFieldType): KeyFieldType => keyToFind;\n
      const keyFound: TLeft = findKey(keyToFind);\n
      return keyFound;\n
      }\n```
    type: single
    id: 14
    options:
      - correct: false
        value: "Переменной пересечённого типа можно присвоить значения любого из пересекаемых типов."
        resultMessage: "Значения в пересекаемом типе могут выходить за рамки пересечения."
        id: 1
      - correct: true
        value: "Переменной любого из пересекаемых типов можно присвоить значение пересечённого типа."
        resultMessage: "Значения в пересекаемом типе могут выходить за рамки пересечения."
        id: 2
  - title: "В контексте определения кортежа из трёх элементов определите, сколько ошибок обнаружит компилятор для программы."
    description:   |
      ```ts\ntype ShoppingCartLine = [label: string, price: number, discont: number];\n
      const prepareLine = (\n
      label: string,\n
      price: number,\n
      discont?: number,\n
      ): ShoppingCartLine => discont ? [label, price, discont] : [label, price];\n
      \n```
    type: single
    id: 15
    options:
      - correct: false
        value: "0."
        resultMessage: "Все элементы должны быть инициализированы при создании кортежа."
        id: 1
      - correct: true
        value: "1."
        resultMessage: "Все элементы должны быть инициализированы при создании кортежа."
        id: 2
      - correct: false
        value: "2."
        resultMessage: "Все элементы должны быть инициализированы при создании кортежа."
        id: 3
  - description: "```ts\ntype ShoppingCartLine = [label: string, price?: number, discont: number];\n  const prepareLine = (\n      label: string,\n      price: number,\n      discont?: number,\n  ): ShoppingCartLine => discont ? [label, price, discont] : [label, price];\n  \n```"
    options:
      - correct: true
        value: "0."
        resultMessage: "TypeScript допускает необязательные элементы в хвосте кортежа."
        id: 1
      - correct: false
        value: "1."
        resultMessage: "TypeScript допускает необязательные элементы в хвосте кортежа."
        id: 2
      - correct: false
        value: "2."
        resultMessage: "TypeScript допускает необязательные элементы в хвосте кортежа."
        id: 3
    title: "В контексте определения кортежа из трёх элементов определите, сколько ошибок обнаружит компилятор для программы."
    type: "single"
    id: 16
  - description: "```ts\nconst buffer: unknown = 'TypeScript' as unknown\nconst len: number = (buffer as string).length;\n```"
    options:
      - correct: false
        value: "0."
        resultMessage: "TypeScript допускает необязательные элементы только в хвосте кортежа."
        id: 1
      - correct: false
        value: "1."
        resultMessage: "TypeScript допускает необязательные элементы только в хвосте кортежа."
        id: 2
      - correct: true
        value: "2."
        resultMessage: "TypeScript допускает необязательные элементы только в хвосте кортежа."
        id: 3
    title: "В контексте определения кортежа из трёх элементов определите, сколько ошибок обнаружит компилятор для программы."
    type: "single"
    id: 17
  - title: "На примере приведённой программы выясните, создаёт ли дополнительную нагрузку на сборщик мусора использование утверждения типа (as)."
    description:   |
      ```ts\nconst buffer: unknown = 'TypeScript' as unknown\nconst len: number = (buffer as string).length;\n```
    type: single
    id: 18
    options:
      - value: "Нет, утверждение типа не создаст дополнительной нагрузки на сборщик мусора."
        correct: true
        resultMessage: "В отличие от других языков программирования, утверждение типа (as) не влечёт за собой каких-либо действий во время исполнения. Эти утверждения используются только во время компиляции."
        id: 1
      - value: "Да, утверждение типа создаст временное значение, которое придётся утилизировать сборщику мусора."
        correct: false
        resultMessage: "В отличие от других языков программирования, утверждение типа (as) не влечёт за собой каких-либо действий во время исполнения. Эти утверждения используются только во время компиляции."
        id: 2
  - title: "Что делает флаг компилятора strictNullChecks?"
    type: multiple
    id: 19
    options:
      - correct: false
        value: "Запрещает использование ключевого слова null."
        resultMessage: "Когда этот флаг — false, компилятор TypeScript игнорирует null и undefined. Если этот флаг — true, значения null и undefined получают свои собственные особенные типы."
        id: 1
      - correct: true
        value: "Добавляет специальный тип undefined в набор примитивных типов."
        resultMessage: "Когда этот флаг — false, компилятор TypeScript игнорирует null и undefined. Если этот флаг — true, значения null и undefined получают свои собственные особенные типы."
        id: 2
      - correct: true
        value: "Предотвращает доступ к несуществующим свойствам объекта."
        resultMessage: "Когда этот флаг — false, компилятор TypeScript игнорирует null и undefined. Если этот флаг — true, значения null и undefined получают свои собственные особенные типы."
        id: 3
      - correct: false
        value: "Контролирует использование типа any в программе."
        resultMessage: "Когда этот флаг — false, компилятор TypeScript игнорирует null и undefined. Если этот флаг — true, значения null и undefined получают свои собственные особенные типы."
        id: 4
  - title: "Что делает флаг компилятора noImplicitAny?"
    type: "single"
    id: 20
    options:
      - correct: false
        value: "Запрещает использование ключевого слова any для обозначения типа."
        resultMessage: "В некоторых случаях, при отсутствии аннотации типа, TypeScript, не сумев определить тип по контексту, будет неявно добавлять переменной аннотацию типа. Наличие указанного флага в такой ситуации заставляет компилятор сообщать об ошибке."
        id: 1
      - correct: true
        value: "Требует, чтобы компилятор сообщил о значениях, тип которых он не может определить по контексту."
        resultMessage: "В некоторых случаях, при отсутствии аннотации типа, TypeScript, не сумев определить тип по контексту, будет неявно добавлять переменной аннотацию типа. Наличие указанного флага в такой ситуации заставляет компилятор сообщать об ошибке."
        id: 2
  - title: "Какой результат выполнения программы вы ожидаете?"
    description:   |
      ```ts\nconst item = 'TypeScript';\n
      const result = `expression ${item}`;\n
      type item = 'TypeScript';\n
      type result = `expression ${item}`;\n
      \n
      const expression:result = result;\n
      console.log(expression);\n```
    type: single
    id: 21
    options:
      - correct: false
        value: "Программа не компилируется. Её нельзя запустить."
        resultMessage: "Компилятор сообщит об ошибке, но создаст JavaScript-исходник. Результатом работы программы будет строка на консоли [LOG]: \"expression TypeScript\"."
        id: 1
      - correct: false
        value: "Typescript сообщит об ошибке, но создаст программу. Эта программа завершится с ошибкой."
        resultMessage: "Компилятор сообщит об ошибке, но создаст JavaScript-исходник. Результатом работы программы будет строка на консоли [LOG]: \"expression TypeScript\"."
        id: 2
      - correct: true
        value: "TypeScript сообщит об ошибке, но создаст программу. Эта программа при запуске выведет на экран сообщение."
        resultMessage: "Компилятор сообщит об ошибке, но создаст JavaScript-исходник. Результатом работы программы будет строка на консоли [LOG]: \"expression TypeScript\"."
        id: 3
  - title: "Какой тип ожидается у переменной buffer?"
    description:   |
      ```ts\ntype SpellOutNumber<T> = T extends number? string: T;\n\n
      declare function spell<T>(value:T):SpellOutNumber<T> ;\n
      \n
      const buffer = spell(Date());\n
      \n```
    type: single
    id: 22
    options:
      - correct: false
        value: "Date."
        resultMessage: "Тип переменной будет string, благодаря вычислениям условного типа SpellOutNumber."
        id: 1
      - correct: false
        value: "number."
        resultMessage: "Тип переменной будет string, благодаря вычислениям условного типа SpellOutNumber."
        id: 2
      - correct: true
        value: "string."
        resultMessage: "Тип переменной будет string, благодаря вычислениям условного типа SpellOutNumber."
        id: 3
  - title: "Определение типа StrictType эквивалентно какому предоставленному типу?"
    description:  |
      ```ts
      type StrictType<T>={
        [K in keyof T]-?:T[K]|undefined
      }

      interface PersonalData{
        name:string;
        passport: string;
        driversLicense?: string | undefined;
      }

      declare function getPersonalData():PersonalData;
      const data:StrictType<PersonalData> = getPersonalData();
      ```
    type: single
    id: 23
    options:
      - correct: false
        value: "Omit."
        resultMessage: "Приведённый тип создаёт проекцию тип-параметра, и все свойства теряют опциональность. Следовательно, он эквивалентен утилитарному типу Required."
        id: 1
      - correct: false
        value: "Partial."
        resultMessage: "Приведённый тип создаёт проекцию тип-параметра, и все свойства теряют опциональность. Следовательно, он эквивалентен утилитарному типу Required."
        id: 2
      - correct: false
        value: "Pick."
        resultMessage: "Приведённый тип создаёт проекцию тип-параметра, и все свойства теряют опциональность. Следовательно, он эквивалентен утилитарному типу Required."
        id: 3
      - correct: false
        value: "Readonly."
        resultMessage: "Приведённый тип создаёт проекцию тип-параметра, и все свойства теряют опциональность. Следовательно, он эквивалентен утилитарному типу Required."
        id: 4
      - correct: true
        value: "Required."
        resultMessage: "Приведённый тип создаёт проекцию тип-параметра, и все свойства теряют опциональность. Следовательно, он эквивалентен утилитарному типу Required."
        id: 5
