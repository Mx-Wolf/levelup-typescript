title: "Поведение интерфейсов в TypeScript"
type: "test"
wizard: true
questions:
  - title: "Может ли интерфейс TypeScript наследовать несколько разных родительских интерфейсов?"
    type: single
    options:
      - value: "Да."
        correct: true
        resultMessage: "TypeScript допускает множественное наследование интерфейсов. Идентификаторы интерфейсов в этом случае указываются через запятую."
        id: 1
      - correct: false
        resultMessage: "TypeScript допускает множественное наследование интерфейсов. Идентификаторы интерфейсов в этом случае указываются через запятую."
        value: "Нет."
        id: 2
    id: 1
  - title: "Почему возникает ошибка компиляции контексте определения интерфейсов Country и View?"
    description: |
      ```ts
      interface Country {
        border: { length: number; };
      }

      interface View {
        border: { color: string; };
      }

      interface CountryView extends Country, View { }

      const countrySettings = {
        border: {
            color: 'red',
            length: 30000,
        },
      };
      ```
    type: single
    options:
      - correct: false
        value: "TypeScript не допускает пустые интерфейсы как CountryView, поскольку они все эквивалентны."
        resultMessage: "Ошибка возникает в связи с несовместимостью структуры свойства border."
        id: 1
      - correct: false
        value: "TypeScript не допускает множественное наследование неэкспортированных интерфейсов."
        resultMessage: "Ошибка возникает в связи с несовместимостью структуры свойства border."
        id: 2
      - correct: false
        value: "TypeScript не допускает множественное наследование интерфейсов, содержащих сложные типы."
        resultMessage: "Ошибка возникает в связи с несовместимостью структуры свойства border."
        id: 3
      - correct: true
        value: "Правильный ответ не указан"
        resultMessage: "Ошибка возникает в связи с несовместимостью структуры свойства border."
        id: 4
    id: 2
  - title: "В контексте определения интерфейсов GeoBorder, DrawableBorder является ли тип значения переменной эквивалентным интерфейсу CountryView?"
    description: |
      ```ts
      interface GeoBorder {
        length: number;
      }

      interface DrawableBorder {
        color: string;
      }

      interface Border extends GeoBorder, DrawableBorder{}

      interface CountryView {
        border:Border;
      }

      const countrySettings = {
        border: {
          color: 'black',
          length: 30000,
        },
      } as const;
      ```
    type: single
    options:
      - correct: false
        value: "Нет."
        resultMessage: "Эквивалентность типов в TypeScript рассматривается относительно применимых операций. В контексте приведённого примера можно допустить функции, где значения типа CountryView и значение переменной countryView будут эквивалентны, а можно — где нет."
        id: 1
      - correct: false
        value: "Да."
        resultMessage: "Эквивалентность типов в TypeScript рассматривается относительно применимых операций. В контексте приведённого примера можно допустить функции, где значения типа CountryView и значение переменной countryView будут эквивалентны, а можно — где нет."
        id: 2
      - correct: true
        value: "Невозможно ответить."
        resultMessage: "Эквивалентность типов в TypeScript рассматривается относительно применимых операций. В контексте приведённого примера можно допустить функции, где значения типа CountryView и значение переменной countryView будут эквивалентны, а можно — где нет."
        id: 3
    id: 3
