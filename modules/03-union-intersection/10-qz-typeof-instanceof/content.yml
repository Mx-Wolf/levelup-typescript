description: ""
failureMessage: "Помните, что typeof применяется в TypeScript в разных контекстах по разному. В TypeScript он прокидывает связь между пространством значений и пространством типов"
questions:
  - description: ""
    options:
      - correct: true
        value: "являются операторами JavaScript, а не только TypeScript"
        resultMessage: "Когда операторы применяются в контексте значений, они выполняются во время работы программы и являются операторами JavaScript"
        id: 1
      - correct: false
        value: "выполняются во время работы программы, а не во время компиляции"
        resultMessage: "Оператор typeof может быть использован в контексте типов. В этом случае он выполняется во время компиляции"
        id: 2
      - correct: false
        value: "Позволяют выяснить сведения о типе примитивных значений"
        resultMessage: "instanceof позволяет узнать наличие указанного конструктора в цепочке прототипов, у примитивных значений этот оператор возвращает false"
        id: 3
      - correct: false
        value: "позволяют выяснить имя интерфейса TypeScript во время работы программы"
        resultMessage: "говорить об именах интерфейсов TypeScript можно только в контексте TypeScript, а поскольку операторы выполняются во время работы программы утверждение не имеет смысла"
        id: 4
      - correct: false
        value: "Позволяют узнать имя абстрактного класса, наследником которого является значение"
        resultMessage: "instanceof позволяет проверить, что указанный конструктор находится в цепочки прототипов. Узнать имя абстрактного класса с помощью этого оператора нельзя"
        id: 5
    title: "Что общего между typeof и instanceof"
    type: "multiple"
    id: 1
  - description: "```typescript\n\ndeclare class AbstractView{\n    appendTo(container:HTMLDivElement):void;\n}\ndeclare function log(line: string):void;\n\nfunction render(container:HTMLDivElement, view:AbstractView):void{\n  view.appendTo(container);\n  if(view instanceof AbstractView){\n      return;\n  }\n  log('is it possible to reach here?');\n}\n\n\n```"
    options:
      - correct: false
        resultMessage: "Определение класса в TypeScript существует в двух пространствах - в пространстве имен функций и в пространстве интерфейсов. Разработчик может использовать интерфейс класса для реализации ООП полиморфизма"
        value: "Да"
        id: 1
      - value: "Нет"
        correct: true
        resultMessage: "Определение класса в TypeScript существует в двух пространствах - в пространстве имен функций и в пространстве интерфейсов. Разработчик может использовать интерфейс класса для реализации ООП полиморфизма"
        id: 2
    title: "Правда ли, что в случае строгой компиляции TypeScript приведенный код никогда не запишет в консоль событие, функция log не будет вызвана"
    type: "single"
    id: 2
  - description: "```typescript\nclass AbstractView {\n    appendTo(container: HTMLDivElement): void {\n        throw new Error('make one for yourself');\n    }\n}\n\nclass HeirView extends AbstractView {\n    appendTo(container: HTMLDivElement): void {\n\n    }\n}\n\nclass ImitatorView implements AbstractView{\n    appendTo(container: HTMLDivElement):void{\n\n    }\n}\n\nconst heir = new HeirView() instanceof AbstractView;\nconst imitator = new ImitatorView() instanceof AbstractView;\n\n\n```"
    options:
      - correct: false
        value: "Обе будут true"
        resultMessage: "Оператор instanceof определяет наличие в цепочке прототипов указанной функции конструктора. только hair будет иметь значение true"
        id: 1
      - correct: false
        value: "Обе будут false"
        resultMessage: "Оператор instanceof определяет наличие в цепочке прототипов указанной функции конструктора. только hair будет иметь значение true"
        id: 2
      - correct: true
        value: "hair === true"
        resultMessage: "IN_SYNC_WITH_PREV"
        id: 3
      - correct: false
        value: "imitator === true"
        resultMessage: "IN_SYNC_WITH_PREV"
        id: 4
    title: "В контексте определения классов AbstractView, HeirView, ImitatorView какая из переменных будет иметь значение false "
    type: "multiple"
    id: 3
  - description: "```typescript\nclass AbstractView {\n    appendTo(container: HTMLDivElement): void {\n        throw new Error('make one for yourself');\n    }\n}\n\nconsole.log(typeof AbstractView)\n\n```"
    options:
      - correct: false
        value: "object"
        resultMessage: "Классы в JavaScript реализованы с помощью функций имя класса соответствует имени функции конструктора в отношении которой и будет выполнен оператор typeof. Следовательно он вернет значение function"
        id: 1
      - correct: false
        value: "class"
        resultMessage: "Классы в JavaScript реализованы с помощью функций имя класса соответствует имени функции конструктора в отношении которой и будет выполнен оператор typeof. Следовательно он вернет значение function"
        id: 2
      - correct: true
        value: "function"
        resultMessage: "IN_SYNC_WITH_PREV"
        id: 3
      - correct: false
        value: "во время работы информация о типе значения недоступна, поэтому программа завершится с ошибкой"
        resultMessage: "IN_SYNC_WITH_PREV"
        id: 4
    title: "В контексте определения класса AbstractView  определите результат работы оператора typeof"
    type: "multiple"
    id: 4
successMessage: "Помните, что typeof применяется в TypeScript в разных контекстах по разному. В TypeScript он прокидывает связь между пространством значений и пространством типов"
title: "Проверьте свое понимание роли typeof и instanceof в TypeScript"
type: "test"
wizard: true
