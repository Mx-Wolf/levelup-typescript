title: "Концепция индексированных типов"
type: test
wizard: true
questions:
  - description: |
      ```typescript
      const config = {
          endpoint: "https://example.com/api",
          timeout: 5,
          autoRetry: true,
      }

      type Timeout = (typeof config)["timeout"]
      ```
    options:
      - correct: false
        value: "string | number | boolean."
        resultMessage: "Хотя в составе объекта config есть ключи с разными типами значений, TypeScript достаточно догадлив, чтобы определить тип ключа timeout как number."
        id: 1
      - correct: true
        value: "number."
        resultMessage: "TypeScript достаточно догадлив, чтобы определить тип ключа timeout как число."
        id: 2
      - correct: false
        value: "5."
        resultMessage: "Поскольку значение ключа timeout может быть изменено в процессе работы программы, к нему не применяются правила специализации типов литеральных значений."
        id: 3
    title: "В контексте определения переменной укажите тип, эквивалентный типу Timeout в отношении всех возможных операций."
    type: "single"
    id: 1
  - description: |
      ```typescript
      const config = {
              endpoint: "https://example.com/api",
              timeout: 5,
              autoRetry: true,
          } as const;

          type Timeout = (typeof config)["timeout"]
      ```
    options:
      - correct: false
        value: "string | number | boolean."
        resultMessage: "В составе объекта config в указанном отрывке не только определён набор ключей, но и отмечено, что значения этих ключей не должны меняться. TypeScript достаточно догадлив, чтобы определить тип ключа timeout как число."
        id: 1
      - correct: false
        value: "number."
        resultMessage: "Поскольку ключ timeout определён как readonly, к нему применяется правило специализации литерального значения, и TypeScript требует при использовании этого объекта считать тип каждого ключа зафиксированным на начальное литеральное значение."
        id: 2
      - correct: true
        value: "5."
        resultMessage: "Примечание as const указывает что ключ timeout определён как readonly, к нему применяется правило специализации литерального значения."
        id: 3
    title: "В контексте определения переменной укажите тип, эквивалентный типу Timeout в отношении всех возможных операций."
    type: "single"
    id: 2
  - title: "В контексте определения переменной укажите тип, эквивалентный типу Timeout в отношении всех возможных операций."
    description: |
      ```typescript
      const config = {
              endpoint: "https://example.com/api",
              timeout: 5,
              autoRetry: true,
          };

          type Timeout = (typeof config)[keyof typeof config]
      ```
    options:
      - correct: true
        value: "string | number | boolean."
        resultMessage: "В контексте определения типа Timeout оператор typeof определяет и запоминает тип значения переменной config. Оператор keyof создаёт объединение всех ключей. Оператор доступа по индексу к типу создаёт объединение типов возможных значений."
        id: 1
      - correct: false
        value: "number."
        resultMessage: "Используется объединение типов возможных значений."
        id: 2
      - correct: false
        value: "5."
        resultMessage: "Поскольку значение config не помечено признаком as const, специализации литеральных типов не происходит."
        id: 3
    type: "single"
    id: 3
  - title: "В контексте определения типов укажите, сколько числовых свойств будет иметь значение типа Options?"
    description: |
      ```typescript
      type Decoration = "bold" | "italic" | "underline" | "strikethrough";

      type OptionType<T extends Decoration | "size"> = T extends "size" ? number : boolean;

      type Options = {
          [key in Decoration | "size"]: OptionType<key>
      }
      ```
    options:
      - correct: false
        value: "0."
        resultMessage: "Тип Options будет иметь несколько свойств. Объединённый тип Decoration | \"size\" содержит пять специализированных строковых литеральных типов. Условный тип OptionType выбирает number только для одного из них."
        id: 1
      - correct: true
        value: "1."
        resultMessage: "Объединённый тип Decoration | \"size\" содержит пять специализированных строковых литеральных типов. Оператор in организует цикл по всем элементам этого объединения. Условный тип OptionType выбирает number только для одного из них — для size."
        id: 2
      - correct: false
        value: "4."
        resultMessage: "Тип Decoration содержит четыре специализированных строковых литеральных типов. Однако в Options используется этот Decoration не напрямую, а в составе объединения."
        id: 3
      - correct: false
        value: "5"
        resultMessage: "Хотя в определении типа Options будет пять ключей, не все они будут иметь возможность содержать числовые значения."
        id: 4
    type: "single"
    id: 4
