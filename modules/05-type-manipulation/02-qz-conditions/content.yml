title: Ветвление типов
type: test
wizard: true
questions:
  - title: "Существует ли операция, в отношении которой определения типа Verbalize<boolean> и  TrueFalseNamed не являются эквивалентными?"
    description: |
      ```ts
      type Verbalize<T> = T extends boolean? "true"|"false": never;
      type TrueFalseNamed = "false"|"true";
      ```
    options:
      - value: "Нет."
        correct: true
        resultMessage: "Специализация типа Verbalize на тип-переменную boolean создаёт тип, идентичный во всех отношениях типу TrueFalseName. Действительно выражение Verbalize<boolean> диктует компилятору вычислить выражение T extends boolean и получить истину. Следовательно выбирается выражение \"true\"|\"false\" как результат вычислений"
        id: 1
      - correct: false
        resultMessage: "После замены переменной T на фактическое значение boolean TypeScript сразу производит вычисления результата. Специализация типа Verbalize на тип-переменную boolean создаёт тип, идентичный во всех отношениях типу TrueFalseName."
        value: "Да."
        id: 2
    type: "single"
    id: 1
  - title: "В контексте определения типов Color и  определите тип переменных x и y."
    description: |
      ```ts
      type Color = "red" | "green" | "blue";
      type BorderSetting<T> = {
            color: T;
            width: number;
      }
      type Border<T> = Color extends T ? BorderSetting<T> : "none";
      declare function setBorder<T extends Color | "none">(color: T, width?: number|undefined): Border<T>;
      const x = setBorder("red", 2);
      const y = setBorder("none");
      ```
    options:
      - correct: true
        value: "Обе переменные имеют специализированный строковый тип \"none\"."
        resultMessage: "Поскольку тип-переменная T находится справа от оператора extends, условный тип вычисляется на основании ответа на вопрос: «Специализирует ли Color тип-переменную T?» Возможно, разработчик перепутал типы в условии местами. Поскольку объединение строковых литеральных типов \"red\" | \"green\" | \"blue\" не может расширять единственный литеральный тип \"red\" результат условного типа - \"none\""
        id: 1
      - correct: false
        value: "x имеет тип BorderSetting<\"red\">."
        resultMessage: "Хотя в отрывке используется условный тип, его действие в приведенном контексте не проявляется вовсе. Поскольку тип-переменная T находится справа от оператора extends, условный тип вычисляется на основании ответа на вопрос: «Специализирует ли Color тип T?» Возможно, разработчик перепутал типы в условии местами."
        id: 2
    type: "single"
    id: 2
  - description: "```typescript\ntype Color = \"red\" | \"green\" | \"blue\";\ntype BorderSetting<T> = {\n    color: T;\n    width: number;\n}\ntype Border<T> = T extends Color ? BorderSetting<T> : \"none\";\n\ndeclare function setBorder<T extends Color | \"none\">(color: T, width?: number|undefined): Border<T>;\n\nconst x = setBorder(\"red\", 2);\nconst y = setBorder(\"none\");\n\n```"
    options:
      - correct: false
        value: "Обе переменные имеют специализированный строковый тип \"none\"."
        resultMessage: "Определение условного типа производит вычисления типа отвечая на вопрос, является ли значение значение типа дженерик переменной специализацией объединения типа трех литеральных строковых типов. Поскольку аргумент color имеет литеральное значение \"red\", его тип считается литеральной специализацией строкового типа \"red\", в том числе специализацией типа Color."
        id: 1
      - correct: true
        value: "x имеет тип BorderSetting<\"red\">."
        resultMessage: "Поскольку аргумент color имеет литеральное значение \"red\", его тип считается литеральной специализацией строкового типа \"red\", в том числе специализацией типа Color."
        id: 2
    title: "В контексте определения типов определите тип переменных x и y."
    type: "single"
    id: 3
  - title: "В контексте определения типов укажите верное значение типа Debug1."
    description: |
      ```ts
      type Promised<T> = T extends string? Promise<T>: never;
      type Debug1 = Promised<\"title\"|\"description\">;
      ```
    options:
      - correct: true
        value: "Promise<\"title\"> | Promise<\"description\">."
        resultMessage: "Условный тип Promised является дистрибутивным."
        id: 1
      - correct: false
        value: "never."
        resultMessage: "Значение дженерика в указанном отрывке, является объединением типов - специализаций строки. Поскольку условный тип Promised является дистрибутивным, TypeScript производит вычисления над каждым элементом объединения отдельно и вычисления эти истинны. Раз они истинны, тип never результатом не станет"
        id: 2
      - correct: false
        value: "Promise<\"title\"|\"description\">."
        resultMessage: "Если бы условные тип Promised не был дистрибутивным, то тип \"title\"|\"description\" привел к результату ложь и значение было бы never. Однако условный тип в данном случае дистрибутивный."
        id: 3
    type: "single"
    id: 4
  - description: "```typescript\ntype Promised<T> = [T] extends [string]? Promise<T>: never;\n\ntype Debug1 = Promised<\"title\"|\"description\">;\n```"
    options:
      - correct: false
        value: "Promise<\"title\"> | Promise<\"description\">."
        resultMessage: "задание условия [T] extends [string] и подобных можно рассматривать как намеренное устранение дистрибутивности условного типа. Условный тип Promised не является дистрибутивным, поскольку тип-переменная используется в составе более сложного типа."
        id: 1
      - correct: false
        value: "never."
        resultMessage: "Объединение двух строковых литеральных типов в свою очередь является специализацией типа string. Поэтому условие в описании типа приведет к результату истина и вторая ветка условного оператора использоваться не будет."
        id: 2
      - correct: true
        value: "Promise<\"title\"|\"description\">."
        resultMessage: "Условный тип Promised не является дистрибутивным, поскольку тип-переменная используется в составе более сложного типа."
        id: 3
    title: "В контексте определения типов укажите верное значение типа Debug1."
    type: "single"
    id: 5
