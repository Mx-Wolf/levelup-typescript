title: Использование ключевого слова infer
type: test
description: |
  Проверьте ваши знания о системе примитивных типов typescript
wizard: true
successMessage: Порядок, переходим к следующему разделу
failureMessage: Вам следует повторить основные сведения об использовании infer
questions:
  - id: 11
    title: Какой тип будет иметь переменная firstArg?
    description: |
      В контексте следующего определения типа AnyFunctionFirstArg определите тип переменной firstArg
      ```typescript
      type AnyFunctionFirstArg<T> =
          T extends (
              a: infer R,
              ...rest: any[]
          ) => any ?
          R :
          never;

      declare const func: (left: number, right: number) => boolean;

      let firstArg: AnyFunctionFirstArg<typeof func>;
      ```
    type: single
    options:
      - id: 10
        value: any
        correct: false
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа первого аргумента из описания типа предъявленной функции. Это будет number
      - id: 20
        value: unknown
        correct: false
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа первого аргумента из описания типа предъявленной функции. Это будет number
      - id: 30
        value: number
        correct: true
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа первого аргумента из описания типа предъявленной функции. Это будет number
  - id: 21
    title: Какой тип будет иметь переменная secondArg?
    description: |
      В контексте следующего определения типа AnyFunctionSecondArg определите тип переменной secondArg
      ```typescript
      type AnyFunctionSecondArg<T> =
          T extends (
              f: any,
              a: infer R,
              ...rest: any[]
          ) => any ?
          R :
          never;

      declare const format: (formatString: string, errorCode: number) => void;

      let secondArg: AnyFunctionSecondArg<typeof format>;
      ```
    type: single
    options:
      - id: 10
        value: any
        correct: false
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа второго аргумента из описания типа предъявленной функции. Это будет number
      - id: 20
        value: unknown
        correct: false
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа второго аргумента из описания типа предъявленной функции. Это будет number
      - id: 30
        value: number
        correct: true
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа второго аргумента из описания типа предъявленной функции. Это будет number
  - id: 31
    title: Какой тип будет иметь переменная data?
    description: |
      В контексте следующего определения типа AwaitedResult определите тип переменной data
      ```typescript
      type AwaitedResult<T> = T extends Promise<infer R>?R:never;
      declare function loadDictionary():Promise<Record<string,string>>;
      let data: AwaitedResult<ReturnType<typeof loadDictionary>>;      ```
    type: single
    options:
      - id: 10
        value: never
        correct: false
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа значений, передаваемых колбэк параметру than. Мы использовали вспомогательный условный тип ReturnType чтобы получить Promise и извлекли из его определения тип возвращаемых данны. Это будет Record<string,string>
      - id: 20
        value: unknown
        correct: false
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа значений, передаваемых колбэк параметру than. Мы использовали вспомогательный условный тип ReturnType чтобы получить Promise и извлекли из его определения тип возвращаемых данны. Это будет Record<string,string>
      - id: 30
        value: Record<string,string>
        correct: true
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа значений, передаваемых колбэк параметру than. Мы использовали вспомогательный условный тип ReturnType чтобы получить Promise и извлекли из его определения тип возвращаемых данны. Это будет Record<string,string>
  - id: 41
    title: Какой тип будет иметь переменная role?
    description: |
      В контексте следующего определения типа ItemType определите тип переменной role
      ```typescript
      type ItemType<T> = T extends (infer R)[]?R:never;
      type User ={
          name: string;
          roles: ("standard"|"manager"|"accounting")[];
      }

      let role: ItemType<User["roles"]>;
      ```
    type: single
    options:
      - id: 10
        value: never
        correct: false
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа значений элементов массива. Мы использовали получение типа массива roles по ключу в типе User. Результат вычислений будет тип, переменные которого могут иметь значением одну из трех строк standard или manager или accounting
      - id: 20
        value: any
        correct: false
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа значений элементов массива. Мы использовали получение типа массива roles по ключу в типе User. Результат вычислений будет тип, переменные которого могут иметь значением одну из трех строк standard или manager или accounting
      - id: 30
        value: |
          "standard"|"manager"|"accounting"
        correct: true
        resultMessage: |
          с помощью infer разработчик информирует typescript, что в R следует поместить определение типа значений, передаваемых колбэк параметру than. Мы использовали вспомогательный условный тип ReturnType чтобы получить Promise и извлекли из его определения тип возвращаемых данны. Это будет Record<string,string>


