title: Интерполяция специализированных строковых типов
type: test
description: |
  Проверьте ваши знания о возможностях использования интерполяции строковых типов
wizard: true
successMessage: Порядок, переходим к следующему разделу
failureMessage: Вам следует повторить основные сведения об интерполяции строковых типов
questions:
  - id: 10
    title: Какой вариант инициализации переменных допустим в typescript
    description: |
      используя определения типов и функций приведенных ниже выясните какие из операций инициализации переменных будут допустимы с точки зрения typescript
      ```typescript
      type Field = "id"|"caption"|"text";
      type Attribute = keyof {
          id:number,
          caption: string,
          text: string,
      };
      declare function getOrderByField():Field;

      const orderByField: Field = getOrderByField();
      const labelField: Attribute = getOrderByField();
      ```
    type: multiple
    options:
      - id: 10
        value: только переменная orderByField будет инициализирована успешно
        correct: false
        resultMessage: |
          типы значений, которые могут содержать переменные orderByField и labelField эквивалентны. Обе инициализации успешны.
      - id: 20
        value: только переменная labelField будет инициализирована успешно
        correct: false
        resultMessage: |
          типы значений, которые могут содержать переменные orderByField и labelField эквивалентны. Обе инициализации успешны.
      - id: 30
        value: обе переменные будут инициализированы успешно.
        correct: true
        resultMessage: |
          типы значений, которые могут содержать переменные orderByField и labelField эквивалентны. Обе инициализации успешны.
  - id: 20
    title: Какие из определений типов некорректны с точки зрения TypeScript
    description: |
      ```typescript
      // вариант 1
      type NotifyPropertyChange<T> = T & {
        subscribe(event:keyof T, handler:(target:T)=>void):()=>void,
      }
      // вариант 2
      type NotifyPropertyChange<T> = T & {
        subscribe(event:keyof T, handler:(target:T)=>void):()=>void,
      }
      // вариант 3
      type NotifyPropertyChange<T> = T & {
        subscribe(event:`${string & keyof T}Change`, handler:(target:T)=>void):()=>void,
      }
      ```
    type: multiple
    options:
      - id: 10
        value: вариант 1 вызывает ошибку компиляции
        resultMessage: |
          формальный аргумент event может содержать значения типа string, symbol, number.
      - id: 20
        value: вариант 2 вызывает ошибку компиляции
        correct: true
        resultMessage: |
          для использования в целях интерполяции подходят только специализации типа string.
      - id: 30
        value: вариант 3 вызывает ошибку компиляции
        correct: false
        resultMessage: |
          пересечение string & keyof T исключает возможные значения ключей за исключением специализированных строковых типов

