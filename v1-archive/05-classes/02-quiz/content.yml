title: Наследование в typescript
type: test
description: |
  Проверьте ваши знания о возможностях ООП в typescript
wizard: true
successMessage: Порядок, переходим к следующему разделу
failureMessage: Вам следует повторить основные сведения о возможностях ООП в typescript
questions:
  - id: 10
    title: В чем разница между extends и implements
    description: |
      в контексте определения типов отметьте верные высказывания
      ```typescript
      class B{
          id: number | undefined;
          name: string | undefined;
      }
      interface I{
          key: number | undefined;
          data: string | undefined;
      }
      ```
    type: multiple
    options:
      - id: 10
        value: допускается наследование class D extends B{}
        correct: true
        resultMessage: |
          класс наследник может специализировать базовый класс
      - id: 20
        value: |
          допускается реализация
          ```typescript
          class D implements B{
            id: number|undefined;
            name: string|undefined;
          }
          ```
        correct: true
        resultMessage: |
          класс может реализовывать интерфейс любого типа, в том числе другого класса
      - id: 30
        value: |
          допускается наследование интерфейса
          ```
          class D extends I{}
          ```
        correct: false
        resultMessage: |
          Cannot extend an interface 'I'. Did you mean 'implements'?(2689)
          'extends' clause of exported class 'D' has or is using private name 'I'.(4020)
      - id: 40
        value: |
          допускается реализация интерфейса
          ```typescript
          class D implements I{
              key: number | undefined;
              data: string| undefined;
          }
          ```
        correct: true
        resultMessage: |
          класс может реализовывать интерфейс
  - id: 20
    title: какие средства предоставляет TypeScript для обеспечения инкапсуляции
    type: single
    options:
      - id: 10
        value: ключевое слово private, protected, public
        correct: true
        resultMessage: |
          private и protected позволяют обозначать поля не предназначенные для использования клиентским кодом, TypeScript статически проследит за соблюдением этого.
      - id: 20
        value: ключевое слово extends
        correct: false
        resultMessage: |
          ключевое слово extends предназначено для наследования (специализации) характеристик базового класса.
      - id: 30
        value: ключевое слово abstract, interface
        correct: false
        resultMessage: |
          TypeScript позволяет описывать интерфейс вне привязки к реализации тем самым обеспечивая инструменты для введения уровней абстракции.
      - id: 40
        value: ключевое слово implements
        correct: false
        resultMessage: |
          TypeScript предоставляет implements как инструмент в области полиморфизма.
  - id: 30
    title: какие средства предоставляет TypeScript для обеспечения наследования
    type: single
    options:
      - id: 10
        value: ключевое слово private, protected, public
        correct: false
        resultMessage: |
          private и protected позволяют обозначать поля не предназначенные для использования клиентским кодом, TypeScript статически проследит за соблюдением этого.
      - id: 20
        value: ключевое слово extends
        correct: true
        resultMessage: |
          ключевое слово extends предназначено для наследования (специализации) характеристик базового класса.
      - id: 30
        value: ключевое слово abstract, interface
        correct: false
        resultMessage: |
          TypeScript позволяет описывать интерфейс вне привязки к реализации тем самым обеспечивая инструменты для введения уровней абстракции.
      - id: 40
        value: ключевое слово implements
        correct: false
        resultMessage: |
          TypeScript предоставляет implements как инструмент в области полиморфизма.
  - id: 40
    title: какие средства предоставляет TypeScript для абстракции
    type: single
    options:
      - id: 10
        value: ключевое слово private, protected, public
        correct: false
        resultMessage: |
          private и protected позволяют обозначать поля не предназначенные для использования клиентским кодом, TypeScript статически проследит за соблюдением этого.
      - id: 20
        value: ключевое слово extends
        correct: false
        resultMessage: |
          ключевое слово extends предназначено для наследования (специализации) характеристик базового класса.
      - id: 30
        value: ключевое слово abstract, interface
        correct: true
        resultMessage: |
          TypeScript позволяет описывать интерфейс вне привязки к реализации тем самым обеспечивая инструменты для введения уровней абстракции.
      - id: 40
        value: ключевое слово implements
        correct: false
        resultMessage: |
          TypeScript предоставляет implements как инструмент в области полиморфизма.
  - id: 50
    title: какие средства предоставляет TypeScript для обеспечения полиморфизма
    type: single
    options:
      - id: 10
        value: ключевое слово private, protected, public
        correct: false
        resultMessage: |
          private и protected позволяют обозначать поля не предназначенные для использования клиентским кодом, TypeScript статически проследит за соблюдением этого.
      - id: 20
        value: ключевое слово extends
        correct: false
        resultMessage: |
          ключевое слово extends предназначено для наследования (специализации) характеристик базового класса.
      - id: 30
        value: ключевое слово abstract, interface
        correct: false
        resultMessage: |
          TypeScript позволяет описывать интерфейс вне привязки к реализации тем самым обеспечивая инструменты для введения уровней абстракции.
      - id: 40
        value: ключевое слово implements
        correct: true
        resultMessage: |
          TypeScript предоставляет implements как инструмент в области полиморфизма.


